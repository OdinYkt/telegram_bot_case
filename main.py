# -*- coding: utf-8 -*-
import copy

from telebot.async_telebot import AsyncTeleBot
from telebot import types
from sql_work import get_list_of_categories, get_columns_with_filter
from fuzzywuzzy import fuzz
import asyncio


def get_config():
    config = {}
    with open('config', 'r') as cfg:
        for line in cfg:
            tmp = line.strip().split('=')
            config[tmp[0]] = tmp[1]
    return config

TOKEN = get_config()['TOKEN']
bot = AsyncTeleBot(TOKEN, parse_mode=None)
users = {}
empty_user = {
    'filter': {
        'domen': '',
        'technology': '',
        'func_group': '',
        'metod': '',
        'name': ''
    },
    'sql_answer': {
        'domen': [],
        'technology': [],
        'func_group': [],
        'metod': [],
        'name': []
    },
    'for_button': {
        'domen': [],
        'technology': [],
        'func_group': [],
        'metod': [],
        'name': []
    },
    'for_info': []
    }

guide0 = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤! üòéüòéüòé"""

guide1 = """–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫</b>. –ó–∞—Ç–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ <b>–î–æ–º–µ–Ω</b>, <b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞</b>, <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</b> –∏ <b>–ú–µ—Ç–æ–¥—ã</b>, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞. –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–æ—á–∫–∏ ‚¨Ö ‚û° –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å–ø–∏—Å–∫–∞–º.
"""
guide2 = """–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ <b>–§–∏–ª—å—Ç—Ä—ã</b> –∏ <b>–°–±—Ä–æ—Å–∏—Ç—å</b>, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –∏—Ö. –ö–æ–≥–¥–∞ –≤—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤, –Ω–∞–∂–º–∏—Ç–µ <b>–ü–æ–∫–∞–∑–∞—Ç—å</b>, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤."""
guide3 = """–ï—Å–ª–∏ –≤—ã –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –∏—â–µ—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π <b>/search <i>[–∑–∞–ø—Ä–æ—Å]</i></b> –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é."""
guide4 = """–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—Ä–æ–µ–∫—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º. –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –Ω–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞!"""
guide5 = """–ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∑–∞–Ω–æ–≤–æ –≤–≤–µ–¥–∏—Ç–µ <b>/guide</b>"""
guide = (guide0, guide1, guide2, guide3, guide4, guide5)

@bot.message_handler(commands=['start'])
async def send_welcome(message):
    users[message.chat.id] = copy.deepcopy(empty_user)
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton('–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫')
    btn2 = types.KeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', )
    markup.add(btn1, btn2)
    await bot.send_message(message.chat.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.chat.first_name}', reply_markup=markup)

@bot.message_handler(commands=['guide'])
async def send_welcome(message):
    for _guide in guide:
        await bot.send_message(message.chat.id, _guide, parse_mode='HTML')

@bot.message_handler(commands=['admin_info'])
async def get_admin_info(message):
    if message.chat.username == 'Odinykt':
        await bot.send_message(message.chat.id, str(len(users)), parse_mode='HTML')
    else:
        await bot.send_message(message.chat.id, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.', parse_mode='HTML')


@bot.message_handler(commands=['admin_save'])
async def save_users(message):
    if message.chat.username == 'Odinykt':
        path = r'C:\Users\Odinykt\Desktop\users\\'
        filename = message.text.split()[1] + '.txt'
        path += filename
        with open(path, 'w') as f:
            for key, value in users.items():
                f.write(f'{message.chat.username}')
        await bot.send_message(message.chat.id, '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.', parse_mode='HTML')
    else:
        await bot.send_message(message.chat.id, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.', parse_mode='HTML')
@bot.message_handler(commands=['search'])
async def send_welcome(message):
    if users.get(message.chat.id) is None:
        users[message.chat.id] = copy.deepcopy(empty_user)

    percent = 50
    order = 'name'
    cur_user = users.get(message.chat.id)
    text = message.text[7:]
    filters = cur_user.get('filter')
    if len(text) > 5:
        names = get_columns_with_filter(where=filters, columns=['name', 'description'])
        str_for_search = [column[0]+' '+column[1] for column in names]
        result = []
        for i in range(len(str_for_search)):
            rating = fuzz.WRatio(str_for_search[i].lower(), text.lower())
            if rating > percent:
                result.append([names[i][0], rating])
        sorted_result = sorted(result, key=lambda x: x[1], reverse=True)
        if sorted_result:
            sorted_result = [x[0] for x in sorted_result]
            cur_user.get('sql_answer')[order] = [sorted_result[i:i + 10] for i in range(0, len(sorted_result), 10)]
            page, pages = 0, len(cur_user.get('sql_answer')[order])
            cur_user.get('for_button')[order] = [page, pages]

            default = [[types.InlineKeyboardButton(text='‚¨Ö', callback_data=f'{order}-page_down'),
                        types.InlineKeyboardButton(text=f'–°—Ç—Ä. {page + 1}/{pages}', callback_data='none-none-none'),
                        types.InlineKeyboardButton(text='‚û°', callback_data=f'{order}-page_up')]]
            btns = cur_user.get('sql_answer')[order][page]

            keyboard = [[types.InlineKeyboardButton(text=btns[i], callback_data=f"{order}-button-{i}")]
                        for i in range(len(btns))]
            default.extend(keyboard)
            markup = types.InlineKeyboardMarkup(default)
            await bot.send_message(message.chat.id, '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:', reply_markup=markup,
                                   parse_mode='HTML')
        else:
            await bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å',
                                   parse_mode='HTML')
    else:
        await bot.send_message(message.chat.id, '–ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤', parse_mode='HTML')

@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫')
async def get_message(message):
    if users.get(message.chat.id) is None:
        users[message.chat.id] = copy.deepcopy(empty_user)
    markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    row1 = ('–î–æ–º–µ–Ω', '–§—É–Ω–∫—Ü. –≥—Ä—É–ø–ø–∞', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è', '–ú–µ—Ç–æ–¥ –∏—Å–ø.')
    row2 = ('–§–∏–ª—å—Ç—Ä—ã', '–°–±—Ä–æ—Å–∏—Ç—å')
    row3 = ('–ü–æ–∫–∞–∑–∞—Ç—å',)
    btns_row1 = [types.KeyboardButton(btn) for btn in row1]
    btns_row2 = [types.KeyboardButton(btn) for btn in row2]
    btns_row3 = [types.KeyboardButton(btn) for btn in row3]
    markup.row(*btns_row1)
    markup.row(*btns_row2)
    markup.row(*btns_row3)
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É –±—É–¥–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '–°–±—Ä–æ—Å–∏—Ç—å')
async def get_drop_filters(message):
    users[message.chat.id] = copy.deepcopy(empty_user)
    await bot.send_message(message.chat.id, '–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.')


@bot.message_handler(func=lambda message: message.text == '–§–∏–ª—å—Ç—Ä—ã')
async def show_filters(message):
    filters = users.get(message.chat.id).get('filter')
    empty = '–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—É—Å—Ç—ã'
    flag = False
    categories = ('domen', 'technology', 'func_group', 'metod')
    categories_rus = ('–î–æ–º–µ–Ω', '–§—É–Ω–∫—Ü. –≥—Ä—É–ø–ø–∞', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è', '–ú–µ—Ç–æ–¥ –∏—Å–ø.',)
    answer = ['__–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:__\n']

    for i in range(len(categories)):
        if filters.get(categories[i]):
            answer.append(f'{categories_rus[i]}: {filters.get(categories[i])}\n')
            flag = True
    if flag:
        empty = ''.join(answer)

    await bot.send_message(message.chat.id, f'{empty}')


@bot.message_handler(func=lambda message: message.text == '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')
async def show_guide(message):
    for _guide in guide:
        await bot.send_message(message.chat.id, _guide, parse_mode='HTML')



@bot.message_handler(func=lambda _message: _message.text.split()[0] in ('–î–æ–º–µ–Ω', '–§—É–Ω–∫—Ü.', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è',
                                                           '–ú–µ—Ç–æ–¥', '–ü–æ–∫–∞–∑–∞—Ç—å'))
async def filter_buttons(message):
    answer = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.'
    if message.text == '–î–æ–º–µ–Ω':
        order = 'domen'
        answer = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å <b>–¥–æ–º–µ–Ω</b>:'
    elif message.text == '–§—É–Ω–∫—Ü. –≥—Ä—É–ø–ø–∞':
        order = 'func_group'
        answer = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å <b>—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É</b>:'
    elif message.text == '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è':
        order = 'technology'
        answer = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å <b>—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é</b>:'
    elif message.text == '–ú–µ—Ç–æ–¥ –∏—Å–ø.':
        order = 'metod'
        answer = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å <b>–º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>:'
    elif message.text == '–ü–æ–∫–∞–∑–∞—Ç—å':
        order = 'name'
        answer = '<b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤</b> –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º:'

    cur_user = users.get(message.chat.id)

    if cur_user.get('filter')[order]:
        await bot.send_message(message.chat.id, f"–£–∂–µ –≤—ã–±—Ä–∞–Ω–æ:\n‚Äî {cur_user.get('filter')[order]}")

    else:
        sql_answer = get_list_of_categories(order, cur_user.get('filter'))
        cur_user.get('sql_answer')[order] = [sql_answer[i:i+10] for i in range(0, len(sql_answer), 10)]
        page, pages = 0, len(cur_user.get('sql_answer')[order])
        cur_user.get('for_button')[order] = [page, pages]

        default = [[types.InlineKeyboardButton(text='‚¨Ö', callback_data=f'{order}-page_down'),
                    types.InlineKeyboardButton(text=f'–°—Ç—Ä. {page + 1}/{pages}', callback_data='none-none-none'),
                    types.InlineKeyboardButton(text='‚û°', callback_data=f'{order}-page_up')]]
        btns = cur_user.get('sql_answer')[order][page]

        keyboard = [[types.InlineKeyboardButton(text=btns[i], callback_data=f"{order}-button-{i}")]
                    for i in range(len(btns))]
        default.extend(keyboard)
        markup = types.InlineKeyboardMarkup(default)
        await bot.send_message(message.chat.id, answer, reply_markup=markup, parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data == 'info')
async def dop_info(call):
    info = users.get(call.message.chat.id).get('for_info')
    info = list(info)
    for i in range(len(info)):
        temp = info[i].strip().split('\n')
        temp = list(filter(bool, temp))
        new_temp = [f'{i+1}. {x}' for i, x in enumerate(temp)]
        info[i] = '\n'.join(new_temp)

    answer = f'<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ | –ë–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥ (–≤–Ω–µ—à–Ω–∏–π —Ä—ã–Ω–æ–∫)</b>:\n{info[0]}\n\n' \
             f'<b>–û–ø–∏—Å–∞–Ω–∏–µ | –ë–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥ (–≤–Ω–µ—à–Ω–∏–π —Ä—ã–Ω–æ–∫)</b>:\n{info[1]}\n\n' \
             f'<b>–ö–æ–º–ø–∞–Ω–∏—è | –ë–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥ (–≤–Ω–µ—à–Ω–∏–π —Ä—ã–Ω–æ–∫)</b>:\n{info[2]}\n\n' \
             f'___________________________________________________\n' \
             f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ì–ü–ù | –ù–ò–û–ö–†</b>:\n{info[3]}\n\n' \
             f'<b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ì–ü–ù | –ù–ò–û–ö–†</b>:\n{info[4]}\n\n' \
             f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ | –ü—Ä–æ–µ–∫—Ç—ã –¶–¢</b>:\n{info[5]}'
    await bot.edit_message_reply_markup(call.message.chat.id,
                                        message_id=call.message.message_id, reply_markup=None)
    await bot.send_message(call.message.chat.id, answer, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data.split('-')[0] == 'name'
                                              and call.data.split('-')[1] == 'button')
async def show_projects(call):
    order, i = call.data.split('-')[0], int(call.data.split('-')[2])
    cur_user = users.get(call.message.chat.id)
    sql_answer = cur_user.get('sql_answer')
    for_button = cur_user.get('for_button')
    filters = cur_user.get('filter')
    page = for_button[order][0]
    cur_btn = sql_answer.get(order)[page][i]
    filters[order] = cur_btn
    answer = get_columns_with_filter(where=filters, columns=['name', 'description'])[0]
    dop_info = get_columns_with_filter(where=filters, columns=['Benchmarking',
                                                               'Benchmarking_description',
                                                               'Benchmarking_company', 'name_project_gpn',
                                                               'description_project',
                                                               'name_project'])[0]
    users[call.message.chat.id] = copy.deepcopy(empty_user)
    users.get(call.message.chat.id)['for_info'] = dop_info
    show_info = [[types.InlineKeyboardButton(text='–î–æ–ø. –∏–Ω—Ñ–æ', callback_data='info')]]
    markup = types.InlineKeyboardMarkup(show_info)
    await bot.edit_message_reply_markup(call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
    await bot.send_message(call.message.chat.id,
                           f'–ù–∞–∑–≤–∞–Ω–∏–µ:\n'
                           f'   <b>{answer[0]}</b>\n'
                           f'\n'
                           f'–û–ø–∏—Å–∞–Ω–∏–µ:\n'
                           f'   {answer[1]}\n'
                           f'–ú–µ—Å—Ç–æ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞:\n'
                           f'   [dashboard.png]',
                           reply_markup=markup, parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data.split('-')[1] in ('page_down', 'page_up'))
async def navigation_buttons(call):
    order, cur_call = call.data.split('-')[0], call.data.split('-')[1]

    cur_user = users.get(call.message.chat.id)
    sql_answer = cur_user.get('sql_answer')
    for_button = cur_user.get('for_button')
    page, pages = for_button[order]

    flag = False

    if cur_call == 'page_down' and page > 0:
        page += -1
        flag = True
    elif cur_call == 'page_up' and page < pages-1:
        page += 1
        flag = True

    if flag:
        for_button[order] = [page, pages]
        btns = sql_answer.get(order)[page]

        default = [[types.InlineKeyboardButton(text='‚¨Ö', callback_data=f'{order}-page_down'),
                    types.InlineKeyboardButton(text=f'–°—Ç—Ä. {page+1}/{pages}', callback_data='none-none-none'),
                    types.InlineKeyboardButton(text='‚û°', callback_data=f'{order}-page_up')]]

        keyboard = [[types.InlineKeyboardButton(text=btns[i], callback_data=f"{order}-button-{i}")]
                    for i in range(len(btns))]
        default.extend(keyboard)
        markup = types.InlineKeyboardMarkup(default)
        await bot.edit_message_reply_markup(call.message.chat.id,
                                            message_id=call.message.message_id, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.split('-')[1] == 'button')
async def show_categories(call):
    order, i = call.data.split('-')[0], int(call.data.split('-')[2])
    cur_user = users.get(call.message.chat.id)
    sql_answer = cur_user.get('sql_answer')
    for_button = cur_user.get('for_button')
    filters = cur_user.get('filter')
    page = for_button[order][0]

    btns = sql_answer[order][page]
    filters[order] = btns[i]
    number = len(get_columns_with_filter(where=filters))

    await bot.edit_message_reply_markup(call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
    await bot.set_chat_menu_button(call.message.chat.id, )
    await bot.send_message(call.message.chat.id, f'‚Äî {btns[i]}')
    await bot.send_message(call.message.chat.id, f'–í—ã–±—Ä–∞–Ω–æ {number} –∑–∞–ø–∏—Å–∏')



if __name__ == '__main__':
    asyncio.run(bot.polling())
